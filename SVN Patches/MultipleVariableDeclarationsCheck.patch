Index: src/tests/com/puppycrawl/tools/checkstyle/checks/coding/MultipleVariableDeclarationsCheckTest.java
===================================================================
--- src/tests/com/puppycrawl/tools/checkstyle/checks/coding/MultipleVariableDeclarationsCheckTest.java	(revision 2587)
+++ src/tests/com/puppycrawl/tools/checkstyle/checks/coding/MultipleVariableDeclarationsCheckTest.java	(working copy)
@@ -1,3 +1,21 @@
+////////////////////////////////////////////////////////////////////////////////
+// checkstyle: Checks Java source code for adherence to a set of rules.
+// Copyright (C) 2001-2010  Oliver Burn
+//
+// This library is free software; you can redistribute it and/or
+// modify it under the terms of the GNU Lesser General Public
+// License as published by the Free Software Foundation; either
+// version 2.1 of the License, or (at your option) any later version.
+//
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+// Lesser General Public License for more details.
+//
+// You should have received a copy of the GNU Lesser General Public
+// License along with this library; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+////////////////////////////////////////////////////////////////////////////////
 package com.puppycrawl.tools.checkstyle.checks.coding;
 
 import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
@@ -5,13 +23,13 @@
 import java.io.File;
 import org.junit.Test;
 
+/** Test class. */
 public class MultipleVariableDeclarationsCheckTest extends BaseCheckTestSupport
 {
     @Test
-    public void testIt() throws Exception
+    public void testStandartSituation() throws Exception
     {
-        DefaultConfiguration checkConfig =
-            createCheckConfig(MultipleVariableDeclarationsCheck.class);
+        DefaultConfiguration checkConfig = createCheckConfig(MultipleVariableDeclarationsCheck.class);
 
         final String[] expected = {
             "3:5: Each variable declaration must be in its own statement.",
@@ -20,11 +38,75 @@
             "8:9: Only one variable definition per line allowed.",
             "12:5: Only one variable definition per line allowed.",
             "15:5: Only one variable definition per line allowed.",
-            "20:14: Each variable declaration must be in its own statement.",
+            "20:14: Each variable declaration must be in its own statement.", };
+
+        checkConfig.addAttribute("ignoreCycles", "false");
+        checkConfig.addAttribute("ignoreMethods", "false");
+
+        verify(checkConfig, getPath("coding" + File.separator
+                + "InputMultipleVariableDeclarations.java"), expected);
+    }
+
+    @Test
+    public void testIgnoreCycles() throws Exception
+    {
+        DefaultConfiguration checkConfig = createCheckConfig(MultipleVariableDeclarationsCheck.class);
+
+        final String[] expected = {
+            "3:5: Each variable declaration must be in its own statement.",
+            "4:5: Only one variable definition per line allowed.",
+            "7:9: Each variable declaration must be in its own statement.",
+            "8:9: Only one variable definition per line allowed.",
+            "12:5: Only one variable definition per line allowed.",
+            "15:5: Only one variable definition per line allowed.",
+       //   "20:14: Each variable declaration must be in its own statement.",
         };
 
-        verify(checkConfig,
-               getPath("coding" + File.separator + "InputMultipleVariableDeclarations.java"),
-               expected);
+        checkConfig.addAttribute("ignoreCycles", "true");
+        checkConfig.addAttribute("ignoreMethods", "false");
+        verify(checkConfig, getPath("coding" + File.separator
+                + "InputMultipleVariableDeclarations.java"), expected);
     }
+
+    @Test
+    public void testIgnoreMethods() throws Exception
+    {
+        DefaultConfiguration checkConfig = createCheckConfig(MultipleVariableDeclarationsCheck.class);
+
+        final String[] expected = {
+            "3:5: Each variable declaration must be in its own statement.",
+            "4:5: Only one variable definition per line allowed.",
+         // "7:9: Each variable declaration must be in its own statement.",
+         // "8:9: Only one variable definition per line allowed.",
+            "12:5: Only one variable definition per line allowed.",
+            "15:5: Only one variable definition per line allowed.",
+            "20:14: Each variable declaration must be in its own statement.", };
+
+        checkConfig.addAttribute("ignoreCycles", "false");
+        checkConfig.addAttribute("ignoreMethods", "true");
+        verify(checkConfig, getPath("coding" + File.separator
+                + "InputMultipleVariableDeclarations.java"), expected);
+    }
+
+    @Test
+    public void testIgnoreMethodsAndIgnoreCycles() throws Exception
+    {
+        DefaultConfiguration checkConfig = createCheckConfig(MultipleVariableDeclarationsCheck.class);
+
+        final String[] expected = {
+            "3:5: Each variable declaration must be in its own statement.",
+            "4:5: Only one variable definition per line allowed.",
+         // "7:9: Each variable declaration must be in its own statement.",
+         // "8:9: Only one variable definition per line allowed.",
+            "12:5: Only one variable definition per line allowed.",
+            "15:5: Only one variable definition per line allowed.",
+         // "20:14: Each variable declaration must be in its own statement.",
+        };
+
+        checkConfig.addAttribute("ignoreCycles", "true");
+        checkConfig.addAttribute("ignoreMethods", "true");
+        verify(checkConfig, getPath("coding" + File.separator
+                + "InputMultipleVariableDeclarations.java"), expected);
+    }
+
 }
Index: src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MultipleVariableDeclarationsCheck.java
===================================================================
--- src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MultipleVariableDeclarationsCheck.java	(revision 2587)
+++ src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MultipleVariableDeclarationsCheck.java	(working copy)
@@ -16,6 +16,7 @@
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
+
 package com.puppycrawl.tools.checkstyle.checks.coding;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
@@ -26,25 +27,50 @@
 
 /**
  * <p>
- * Checks that each variable declaration is in its own statement
- * and on its own line.
+ * Checks that each variable declaration is in its own statement and on its own
+ * line.
  * </p>
  * <p>
- * Rationale: <a
- * href="http://java.sun.com/docs/codeconv/html/CodeConventions.doc5.html#2991">
- * the SUN Code conventions chapter 6.1</a> recommends that
- * declarations should be one per line.
+ * Rationale: <a href=
+ * "http://java.sun.com/docs/codeconv/html/CodeConventions.doc5.html#2991"> the
+ * SUN Code conventions chapter 6.1</a> recommends that declarations should be
+ * one per line.
  * </p>
  * <p>
  * An example of how to configure the check is:
  * </p>
  * <pre>
  * &lt;module name="MultipleVariableDeclarations"/&gt;
- * </pre>
+ * </pre> *
  * @author o_sukhodolsky
  */
+
 public class MultipleVariableDeclarationsCheck extends Check
 {
+
+    /** check declaration in Methods. */
+    private boolean mIgnoreCycles;
+
+    /** check declaration in cycles. */
+    private boolean mIgnoreMethods;
+
+    /**
+     * Enable|Disable declaration checking in cycles.
+     * @param aValue check declaration in Methods
+     */
+    public void setIgnoreCycles(final boolean aValue)
+    {
+        mIgnoreCycles = aValue;
+    }
+
+    /**Enable|Disable declaration checking in Methods. *
+     * @param aValue check declaration in Methods
+     */
+    public void setIgnoreMethods(final boolean aValue)
+    {
+        mIgnoreMethods = aValue;
+    }
+
     /** Creates new instance of the check. */
     public MultipleVariableDeclarationsCheck()
     {
@@ -56,26 +82,29 @@
         return new int[] {TokenTypes.VARIABLE_DEF};
     }
 
-    @Override
-    public void visitToken(DetailAST aAST)
+    /** Searches for wrong declarations and checks the their type.
+    * @param aAST uses to get the parent or previous sibling token.
+    */
+    public void work(DetailAST aAST)
     {
+
         DetailAST nextNode = aAST.getNextSibling();
-        final boolean isCommaSeparated =
-            ((nextNode != null) && (nextNode.getType() == TokenTypes.COMMA));
+        final boolean isCommaSeparated = ((nextNode != null) && (nextNode
+                .getType() == TokenTypes.COMMA));
 
         if (nextNode == null) {
-            // no next statement - no check
+            // no nextMethods statement - no check
             return;
         }
 
         if ((nextNode.getType() == TokenTypes.COMMA)
-            || (nextNode.getType() == TokenTypes.SEMI))
+                || (nextNode.getType() == TokenTypes.SEMI))
         {
             nextNode = nextNode.getNextSibling();
         }
 
         if ((nextNode != null)
-            && (nextNode.getType() == TokenTypes.VARIABLE_DEF))
+                && (nextNode.getType() == TokenTypes.VARIABLE_DEF))
         {
             final DetailAST firstNode = CheckUtils.getFirstNode(aAST);
             if (isCommaSeparated) {
@@ -93,6 +122,29 @@
 
     }
 
+    @Override
+    public void visitToken(DetailAST aAST)
+    {
+
+        final DetailAST token = aAST;
+        final boolean inFor = (aAST.getParent().getType()
+                == TokenTypes.FOR_INIT);
+        final boolean inClass = (aAST.getParent().getParent().getType()
+                == TokenTypes.CLASS_DEF);
+
+        if (inClass) {
+            work(token);
+        }
+        else if (!mIgnoreCycles & inFor) {
+            work(token);
+        }
+
+        else if (!mIgnoreMethods & !inClass & !inFor) {
+            work(token);
+        }
+
+    }
+
     /**
      * Finds sub-node for given node maximum (line, column) pair.
      * @param aNode the root of tree for search.
@@ -105,8 +157,9 @@
         while (child != null) {
             final DetailAST newNode = getLastNode(child);
             if ((newNode.getLineNo() > currentNode.getLineNo())
-                || ((newNode.getLineNo() == currentNode.getLineNo())
-                    && (newNode.getColumnNo() > currentNode.getColumnNo())))
+                    || ((newNode.getLineNo()
+                         == currentNode.getLineNo()) && (newNode
+                            .getColumnNo() > currentNode.getColumnNo())))
             {
                 currentNode = newNode;
             }
